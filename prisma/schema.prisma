generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_PRISMA_URL")
  directUrl         = env("DATABASE_URL_NON_POOLING")
  shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING")
}

enum FrameType {
  EFFECT
  EFFECT_PENDULUM
  FUSION
  FUSION_PENDULUM
  LINK
  NORMAL
  NORMAL_PENDULUM
  RITUAL
  RITUAL_PENDULUM
  SPELL
  SYNCHRO
  SYNCHRO_PENDULUM
  TOKEN
  TRAP
  XYZ
  XYZ_PENDULUM
}

enum CardType {
  EFFECT_MONSTER
  FLIP_EFFECT_MONSTER
  FLIP_TUNER_EFFECT_MONSTER
  FUSION_MONSTER
  GEMINI_MONSTER
  LINK_MONSTER
  NORMAL_MONSTER
  NORMAL_TUNER_MONSTER
  PENDULUM_EFFECT_MONSTER
  PENDULUM_EFFECT_FUSION_MONSTER
  PENDULUM_EFFECT_RITUAL_MONSTER
  PENDULUM_FLIP_EFFECT_MONSTER
  PENDULUM_NORMAL_MONSTER
  PENDULUM_TUNER_EFFECT_MONSTER
  RITUAL_EFFECT_MONSTER
  RITUAL_MONSTER
  SPELL_CARD
  SPIRIT_MONSTER
  SYNCHRO_MONSTER
  SYNCHRO_PENDULUM_EFFECT_MONSTER
  SYNCHRO_TUNER_MONSTER
  TOON_MONSTER
  TOKEN
  TRAP_CARD
  TUNER_MONSTER
  UNION_EFFECT_MONSTER
  XYZ_MONSTER
  XYZ_PENDULUM_EFFECT_MONSTER
}

enum LinkMarker {
  BOTTOM_LEFT
  BOTTOM_RIGHT
  BOTTOM
  LEFT
  RIGHT
  TOP_LEFT
  TOP_RIGHT
  TOP
}

enum MonsterAttribute {
  DARK
  DIVINE
  EARTH
  FIRE
  LIGHT
  WATER
  WIND
}

enum CardRace {
  AQUA
  BEAST
  BEAST_WARRIOR
  CONTINUOUS
  COUNTER
  CREATOR_GOD
  CYBERSE
  DINOSAUR
  DIVINE_BEAST
  DRAGON
  DR_VELLIAN_C
  EQUIP
  FAIRY
  FIEND
  FIELD
  FISH
  ILLUSION
  INSECT
  MACHINE
  NORMAL
  PLANT
  PSYCHIC
  PYRO
  QUICK_PLAY
  REPTILE
  RITUAL
  ROCK
  SEA_SERPENT
  SPELLCASTER
  THUNDER
  WARRIOR
  WINGED_BEAST
  WYRM
  ZOMBIE
}

model Card {
  id           Int               @id
  name         String
  type         CardType
  frameType    FrameType
  desc         String
  atk          Int?
  def          Int?
  level        Int?
  scale        Int?
  linkval      Int?
  linkmarkers  LinkMarker[]
  race         CardRace?
  attribute    MonsterAttribute?
  archetype    String?
  image_url    String
  card_sets    Json[]
  card_prices  Json[]
  banlist_info Json?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  konami_id     String?   @unique
  accounts      Account[]
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())

  @@unique([email, token])
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())

  @@unique([email, token])
}
