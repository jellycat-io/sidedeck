generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum DeckListType {
  MAIN
  EXTRA
  SIDE
}

enum CardLanguage {
  EN
  FR
  DE
  ES
  IT
  PT
  JP
  KR
}

enum CardRarity {
  C
  R
  SR
  HFR
  UR
  URP
  UtR
  ScR
  QSrR
  UScR
  ScUR
  PScR
  PR
  SFR
  SLR
  GR
  GUR
}

type CardSet {
  setCode  String
  setName  String
  setPrice String
}

type CardIssue {
  id        String
  rarity    CardRarity
  language  CardLanguage
  quantity  Int          @default(1)
  tradeable Boolean      @default(false)
  set       CardSet
  createdAt DateTime     @default(now())
  updatedAt DateTime
}

model UserCard {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  cardId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  issues    CardIssue[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([cardId])
}

type DeckCard {
  id       String
  quantity Int    @default(1)
}

type DeckList {
  type  DeckListType
  cards DeckCard[]
}

model Deck {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  title       String
  slug        String
  description String?
  type        String
  valid       Boolean    @default(false)
  lists       DeckList[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

type WishlistDeckItem {
  deckId   String @db.ObjectId
  quantity Int    @default(1)
}

model WishListItem {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  userId    String             @db.ObjectId
  cardId    String
  quantity  Int
  deckItems WishlistDeckItem[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([cardId])
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  emailVerified DateTime?
  image         String?
  password      String?
  konamiId      String?        @unique
  accounts      Account[]
  cards         UserCard[]
  decks         Deck[]
  wishlist      WishListItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([email])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@index([expires])
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@index([expires])
}
